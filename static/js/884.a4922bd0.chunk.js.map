{"version":3,"file":"static/js/884.a4922bd0.chunk.js","mappings":"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","sources":["components/hooks/use-http.js","components/lib/api.js","webpack://react-router-example/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-router-example/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useCallback, useReducer } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async (requestedData) => {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestedData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMesssage: error.message || \"Something went wrong\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-7815e-default-rtdb.firebaseio.com'\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`)\n  const data = await response.json()\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes')\n  }\n\n  const transformedQuotes = []\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    }\n\n    transformedQuotes.push(quoteObj)\n  }\n\n  return transformedQuotes\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`)\n  const data = await response.json()\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.')\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  }\n\n  return loadedQuote\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  const data = await response.json()\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote')\n  }\n  return null\n}\n\nexport async function addComment(requestedData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestedData.quoteId}.json`,\n    {\n      method: 'POST',\n      body: JSON.stringify(requestedData.commentData),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  )\n  const data = await response.json()\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comments')\n  }\n  return { commentId: data.name }\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`)\n  const data = await response.json()\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get commets.')\n  }\n\n  const transformedComments = []\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    }\n    transformedComments.push(commentObj)\n  }\n  return transformedComments\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9h8Dh\"};","import classes from './Card.module.css'\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>\n}\nexport default Card\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ogBoi\",\"loading\":\"QuoteForm_loading__gyIuQ\",\"control\":\"QuoteForm_control__8SqBM\",\"actions\":\"QuoteForm_actions__I8AC6\"};","import { Fragment, useRef, useState } from 'react'\nimport { Prompt } from 'react-router-dom'\nimport Card from '../UI/Card'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport classes from './QuoteForm.module.css'\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false)\n  const authorInputRef = useRef()\n  const textInputRef = useRef()\n\n  const submitFormHandler = (event) => {\n    event.preventDefault()\n\n    const enteredAuthor = authorInputRef.current.value\n    const enteredText = textInputRef.current.value\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText })\n  }\n\n  const formFocusHandler = () => {\n    setIsEntering(true)\n  }\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false)\n  }\n\n  return (\n    <>\n      {/* <Prompt\n        when={isEntering}\n        message={() =>\n          \"Are you sure you want to leave? All your entered data will be lost!\"\n        }\n      /> */}\n      <Card>\n        <form\n          // onFocus={formFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef} />\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </>\n  )\n}\nexport default QuoteForm\n","import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"../components/hooks/use-http\";\nimport { addQuote } from \"../components/lib/api\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      navigate(\"/quotes\");\n    }\n  }, [status, navigate]);\n\n  const addQuoteHander = (quoteData) => {\n    sendRequest(quoteData);\n  };\n  return (\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHander} />\n  );\n};\nexport default NewQuote;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestedData","errorMesssage","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","className","classes","children","useState","setIsEntering","authorInputRef","useRef","textInputRef","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","useHttp","navigate","useNavigate","useEffect"],"sourceRoot":""}